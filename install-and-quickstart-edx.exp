#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Sun Jul 31 22:36:40 2022
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
                          ;# script wasn't run conservatively originally
if {$force_conservative} {
        set send_slow {1 .1}
        proc send {ignore arg} {
                sleep .1
                exp_send -s -- $arg
        }
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn tutor local quickstart
match_max 100000
expect -exact "[32m==================================================\r
        Interactive platform configuration\r
==================================================[0m\r
[33mAre you configuring a production platform? Type 'n' if you are just testing Tutor on your local computer[0m \[Y/n\] "
send -- "Y\r"
expect -exact "Y\r
[33mYour website domain name for students (LMS)[0m \[edu.bitular.link\] "
send -- "\r"
expect -exact "\r
[33mYour website domain name for teachers (CMS)[0m \[studio.edu.bitular.link\] "
send -- "\r"
expect -exact "\r
[33mYour platform name/title[0m \[Sick Ass Open edX\] "
send -- "\r"
expect -exact "\r
[33mYour public contact email address[0m \[contact@edu.bitular.link\] "
send -- "\r"
expect -exact "\r
[33mThe default language code for the platform[0m \[en\] "
send -- "\r"
expect -exact "\r
[33mActivate SSL/TLS certificates for HTTPS access? Important note: this will NOT work in a development environment.[0m \[y/N\] "
send -- "N\r"
expect eof